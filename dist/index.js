// Generated by LiveScript 1.6.0
(function(){
  var readFile, join, ref$, tail, any, drop, objToPairs, find, map, keys, values, spawn, fsrcConfig, config, say, readStateFile, profileUsernames, profileForUsername, openChromiumWithProfile, ifErr, isGiven, hasValue, dmenu, argsList, PATH, args;
  readFile = require('fs').readFile;
  join = require('path').join;
  ref$ = require('prelude-ls'), tail = ref$.tail, any = ref$.any, drop = ref$.drop, objToPairs = ref$.objToPairs, find = ref$.find, map = ref$.map, keys = ref$.keys, values = ref$.values;
  spawn = require('child_process').spawn;
  fsrcConfig = require('fsrc-config');
  config = fsrcConfig('chromium-profiles', {
    "dmenu": {
      "cmd": "rofi",
      "args": ["-dmenu"]
    },
    "debug": false
  });
  say = console.log;
  readStateFile = function(path, callback){
    var file;
    file = join(path, 'Local State');
    return readFile(file, {
      encoding: 'utf8'
    }, function(err, text){
      if (err != null) {
        return callback(new Error("Error - Can't find 'Local State' (" + file + ") file in chromium config directory"));
      } else {
        return callback(null, JSON.parse(text));
      }
    });
  };
  profileUsernames = function(path, callback){
    return readStateFile(path, function(err, localState){
      var usernames;
      if (err != null) {
        return callback(err);
      } else {
        usernames = map(function(it){
          return it.user_name;
        })(
        values(
        localState.profile.info_cache));
        return callback(null, usernames);
      }
    });
  };
  profileForUsername = function(path, username, callback){
    return readStateFile(path, function(err, localState){
      var profile;
      if (err != null) {
        return callback(err);
      } else {
        profile = find(function(pair){
          return pair[1].user_name === username;
        })(
        objToPairs(
        localState.profile.info_cache));
        return callback(null, profile[0]);
      }
    });
  };
  openChromiumWithProfile = function(profile){
    return spawn("chromium", ["--profile-directory=" + profile], {
      detached: true,
      stdio: 'ignore'
    }).unref();
  };
  ifErr = function(err){
    if (err != null) {
      say(err);
      return process.exit(255);
    }
  };
  isGiven = function(argsList, name){
    return any(function(itm){
      return itm.startsWith(name);
    })(
    argsList);
  };
  hasValue = function(argsList, name){
    return function(itm){
      var t;
      if (itm != null) {
        t = tail(
        itm.split('='));
        return t.join("=");
      }
    }(
    find(function(itm){
      return itm.startsWith(name);
    })(
    argsList));
  };
  dmenu = function(alternatives, callback){
    var cp;
    cp = spawn(config.dmenu.cmd, config.dmenu.args);
    cp.stdin.write(alternatives.join('\n'));
    cp.stdin.end();
    return cp.stdout.on('data', function(data){
      return callback(data.toString());
    });
  };
  argsList = drop(2)(
  process.argv);
  PATH = process.env.HOME + "/.config/chromium";
  args = {
    list: isGiven(argsList, '--list'),
    dmenu: hasValue(argsList, '--dmenu'),
    path: hasValue(argsList, '--path'),
    profile: hasValue(argsList, '--profile'),
    open: isGiven(argsList, '--open'),
    help: isGiven(argsList, '--help')
  };
  if (args.path == null) {
    args.path = PATH;
  }
  if (args.help) {
    say("Usage: chromium-profiles [--path=<~/.config/chromium>] [--open | --open=<profile name>] [--dmenu] [--list] [--help]\n\nArguments:\n  --path=            Define the path where the 'Local State' file is located. Defaults to '~/.config/chromium'.\n  --open= | --open   Define what profile to open and open it. Or open whatever profile selected when --list --dmenu.\n  --dmenu            Use dmenu to make a choice.\n  --list             List profiles available.\n  --help             This info.\n\nExamples:\n  chromium-profiles --list --dmenu --open   # Will list profiles in dmenu and open the selected in chromium.\n  chromium-profiles --list                     # Will list profiles in stdout\n  chromium-profiles --open=\"Profile 1\"         # Will open profile 1 in chromium.\n\nAdvanced example, passing arguments to dmenu:\n\n  chromium-profiles --list --open --dmenu\n");
    process.exit(0);
  }
  if (args.list) {
    profileUsernames(PATH, function(err, usernames){
      ifErr(err);
      if (args.dmenu != null) {
        return dmenu(usernames, function(alternative){
          return profileForUsername(PATH, alternative.replace(/\n$/, ""), function(err, profile){
            ifErr(err);
            if (args.open) {
              return openChromiumWithProfile(profile);
            } else {
              return say(profile);
            }
          });
        });
      } else {
        return map(function(username){
          return say(username);
        })(
        usernames);
      }
    });
  } else if (args.profile != null) {
    profileForUsername(PATH, argument, function(err, profile){
      ifErr(err);
      if (args.open) {
        return openChromiumWithProfile(profile);
      } else {
        return say(profile);
      }
    });
  }
}).call(this);
